#!/usr/bin/python

"""
This script is for generating conversion header files which contain functions for unit conversions.

It reads an XML file (conversions.xml) and produces conversions.h

conversions.h contains inline functions that can convert between any unit of measurement listed in units.xml
This script generates linear functions using gain and bias parameter
"""

from lxml import etree
import shutil, sys, getopt


def main():
	text = "/** Generated by ETK Unit Conversion Generator script. */\n\n"
	text += "#ifndef ETK_CONVERSIONS_H\n#define ETK_CONVERSIONS_H\n\n"
	text += "namespace etk\n{\n\n"

	tree = etree.parse("conversions.xml")
	root = tree.getroot()

	if(root.tag != "Units"):
		print("No units in file")
		exit()

	for meas in root:
		if(meas.tag.lower() == "measurement"):
			units = []
			base_unit = meas.get("si_base")
			if(base_unit == None):
				print("Couldn't read base unit text")
				continue

			units.append( (base_unit.lower(), 1.0, 0.0) )
			for unit in meas:
				if(unit.tag.lower() == "conv"):
					gain = str(unit.get("gain"))
					if(gain == "None"):
						gain = "1.0"
					bias = str(unit.get("bias"))
					if(bias == "None"):
						bias = "0.0"
					units.append( (unit.get("unit").lower(), float(gain), float(bias)) )

			for i in range(0, len(units)):
				for j in range(0, len(units)):
					if(i == j):
						continue

					conversion_text = units[j][0] + "_to_" + units[i][0]

					gain = units[0][1]/units[j][1]
					gain *= units[i][1]

					bias = units[i][2]-units[j][2]

					text += "inline real_t " + conversion_text + "(real_t in) { return in"
					if(gain != 1.0):
						text += "*" + str(gain) + "f"
					if(bias != 0.0):
						text +=  "+" + str(bias) + "f"
					text += "; }\n"
				text += "\n"
			text += "\n"
	text += "}\n\n#endif\n\n"

	f = open("conversions.h", "w")
	f.write(text)
	f.close()



if __name__ == "__main__":
   main()
